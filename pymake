#!/bin/python

""" PyMake Makefile generator """

import json
import profiles
from mkfile import Makefile
from optparse import OptionParser

# Parse command line arguments
cmdLine = OptionParser()
cmdLine.add_option("-p", "--profile", dest="profile_name", default="g++", help="Specifies the profile name")
cmdLine.add_option("-n", "--name", dest="prog_name", default="prog", help="Sets the program name")
cmdLine.add_option("-s", "--scan", dest="do_scan", default=False, action="store_true", help="Scan directory for input files")
cmdLine.add_option("-r", "--recursive", dest="scan_recursive", default=False, action="store_true", help="Scan directory recursive (used together with -s)")
options, args = cmdLine.parse_args()

# Try to load json config file
try:
    with open("build.json") as build_json:
        cfg = json.load(build_json)
except IOError:
    cfg = None

make = profiles.table[options.profile_name](cfg)
if cfg == None:
    make.name = options.prog_name
if len(make.source) == 0 or options.do_scan:
    make.source = []
    make.scan(recursive=options.scan_recursive)

if len(make.source) == 0:
    print "Fatal: No source files were found"
    exit(128)

make.build()
make.write("Makefile")

cfg = make.get_properties()
with open("build.json", "wt") as build_json:
    build_json.write(json.dumps(cfg, sort_keys=True, indent=4, separators=(',', ': ')))
